from bs4 import BeautifulSoup
from bs4.element import Tag


class LSMAnalysis:
    def __init__(self, path) -> None:
        self._warning_list = None
        if path[-4:] != ".htm":
            raise TypeError("HTML only.")

        with open(path, "r", encoding='utf-8') as f:
            self._soup = BeautifulSoup(f.read(), "html.parser")

        page_title = self._soup.title.text
        if "アセットブラウザー" in page_title:
            raise TypeError("アセットレポートのファイルを入力してください。")
        if "アセット" not in page_title:
            raise TypeError("LSM only.")

    def failed_list(self) -> dict:
        """Returns a list of assets that failed to load."""

        section = self._soup.select_one("body > section:nth-child(6)")
        failed_assets = [elem.text for elem in section.find_all("a", attrs={"data-lomtag": "failed"})]
        return failed_assets

    def error_list(self) -> dict:
        """Returns a list of assets that had errors (not failures) in loading."""

        section = self._soup.select_one("body > section:nth-child(6)")
        tag = section.find_all("a", attrs={"data-lomtag": "warning"})

        error_assets = list()
        self._warning_list = list()

        for i in tag:
            assets_detail = {"href": i.attrs("href"), "name": i.text}
            if len(self._warning_list) >= 1:
                self._warning_list.append(assets_detail)
            elif self.iserror(i):
                error_assets.append(assets_detail)
            else:
                self._warning_list.append(assets_detail)
        return error_assets

    @staticmethod
    def iserror(elem: Tag) -> bool:
        """It is used in the error_assets method and warning_assets method to make a decision.
        Normally, it is not used."""
        parent = elem.find_parents("div")
        parent = parent[1].previous_siblings

        string = "".join(map(str, parent))
        # なぜかうまくいかない為、一回またsoupを作る
        soup = BeautifulSoup(string, "html.parser")
        text = [j.text for j in soup.find_all("h2")]
        return len(text) == 2

    def warning_list(self) -> dict:
        """returns a list of assets for which warnings were generated by the LSM."""
        if self._warning_list is list:
            return self._warning_list
        else:
            section = self._soup.select_one("body > section:nth-child(6)")
            tag = section.find_all("a", attrs={"data-lomtag": "warning"})

            warning_assets = list()
            for i in tag:
                detail = {"href": i.attrs["href"], "name": i.text}
                if len(warning_assets) >= 1 or not self.iserror(i):
                    warning_assets.append(detail)
            return warning_assets


if __name__ == "__main__":
    import time
    from pprint import pprint

    loading = LSMAnalysis(input("PATH>>").replace('"', ""))

    timer = time.perf_counter()
    asset = loading.warning_list()
    end = time.perf_counter()

    pprint(asset)
    print("時間:", end - timer)
