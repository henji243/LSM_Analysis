from bs4 import BeautifulSoup
from bs4.element import Tag


class LSM_Analysis:
    def __init__(self, path) -> None:
        self.path = path
        if path[-4:] != ".htm":
            raise TypeError("HTML only.")

        with open(path, "r", encoding='utf-8') as f:
            self._soup = BeautifulSoup(f.read(), "html.parser")

        page_title = self._soup.title.text
        if "アセットブラウザー" in page_title:
            raise TypeError("アセットレポートのファイルを入力してください。")
        if "アセット" not in page_title:
            raise TypeError("LSM only.")

    def failed_list(self) -> list:
        """Returns a list of assets that failed to load."""

        section = self._soup.select_one("body > section:nth-child(6)")
        failed_aseets = [elem.text for elem in section.find_all("a", attrs={"data-lomtag":"failed"})]
        return failed_aseets

    def error_list(self) -> list:
        """Returns a list of assets that had errors (not failures) in loading."""

        section = self._soup.select_one("body > section:nth-child(6)")
        tag = section.find_all("a", attrs={"data-lomtag":"warning"})

        error_aseets = list()
        self._warning_list = list()

        for i in tag:
            if len(self._warning_list) >= 1:
                self._warning_list.append(i.text)
            elif self.iserror(i):
                error_aseets.append(i.text)
            else:
                self._warning_list.append(i.text)
        return error_aseets

    def iserror(self, elem: Tag) -> bool:
        """It is used in the error_list method to make a decision.
        Normally, it is not used."""
        parent = elem.find_parents("div")
        parent = parent[1].previous_siblings

        string = "".join(map(str, parent))
        # なぜかうまくいかない為、一回またsoupを作る
        soup = BeautifulSoup(string, "html.parser")
        text = [j.text for j in soup.find_all("h2")]
        return len(text) == 2

    def warning_list(self):
        """returns a list of assets for which warnings were generated by the LSM."""
        try:
            self._warning_list[0]
            return self._warning_list
        except Exception:
            section = self._soup.select_one("body > section:nth-child(6)")
            tag = section.find_all("a", attrs={"data-lomtag":"warning"})

            self._warning_list = list()
            for i in tag:
                if len(self._warning_list) >= 1:
                    self._warning_list.append(i.text)
                elif not self.iserror(i):
                    self._warning_list.append(i.text)
            return self._warning_list


if __name__ == "__main__":
    import time
    from pprint import pprint

    loading = LSM_Analysis(input("PATH>>"))

    timer = time.perf_counter()
    aseet = loading.warning_list()
    end = time.perf_counter()

    pprint(aseet)
    print("時間:", end-timer)
